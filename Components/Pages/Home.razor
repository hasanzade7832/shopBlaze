@page "/"
@using kargardoon.Data
@using kargardoon.Components.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider _authProvider
@inject NavigationManager _navigation
@inject IShoppingCartRepository _cartRepository
@inject ProductCrudManager Manager

<HeroSearch />

<CategoryFilter SelectedCategory="@selectedCategory" OnCategoryChanged="UpdateCategory" />

@if (isLoading)
{
    <div class="text-center my-5">
        <Spinner />
    </div>
}
else
{
    <div class="container pb-5">
        <div class="row g-4">
            @foreach (var p in FilteredProducts)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <div class="card h-100 shadow-sm hover-card">
                        <img class="card-img-top img-thumbnail img-rounded w-100" src="@p.ImageUrl" alt="@p.Name" />

                        <div class="card-body text-center">
                            <h5 class="card-title text-success">@p.Name</h5>
                            <p class="card-text text-muted">@p.Description</p>
                            <p class="fw-bold text-primary mb-2">$@p.Price</p>

                            <button class="btn btn-success w-100" @onclick="() => AddToCart(p)">
                                <i class="bi bi-cart-plus me-1"></i> Add to Cart
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private string selectedCategory = "All";
    private List<Product> allProducts = new();
    private bool isLoading = true;

    private IEnumerable<Product> FilteredProducts =>
        selectedCategory == "All"
            ? allProducts
            : allProducts.Where(x => x.Category?.Name == selectedCategory);

    private void UpdateCategory(string cat) => selectedCategory = cat;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        // ✅ بارگذاری امن از دیتابیس بدون تداخل EF
        allProducts = await Manager.LoadProductsAsync();

        isLoading = false;
        await InvokeAsync(StateHasChanged); // برای اطمینان از رندر صحیح
    }

    private async Task AddToCart(Product product)
    {
        var authState = await _authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            _navigation.NavigateTo("/Account/Login", forceLoad: true);
            return;
        }

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            _navigation.NavigateTo("/Account/Login");
            return;
        }

        var result = await _cartRepository.UpdateCartAsync(userId, product.Id, 1);
        if (!result)
        {
            Console.WriteLine("❌ Failed to add to cart.");
        }
        else
        {
            Console.WriteLine("✅ Product added to cart.");
        }
    }
}
