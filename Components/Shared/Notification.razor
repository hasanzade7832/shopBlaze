@using kargardoon.Services
@implements IDisposable
@inject NotificationService Notifier

<div class="position-fixed top-0 end-0 p-3" style="z-index:2000;">
    @foreach (var note in _messages)
    {
        <div class="toast show align-items-center text-bg-@note.Level.ToString().ToLower() mb-2"
             role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">@note.Message</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => Dismiss(note)"></button>
            </div>
        </div>
    }
</div>

@code {
    private readonly List<NotificationMessage> _messages = new();

    protected override void OnInitialized() =>
        Notifier.OnNotify += HandleNotify;

    private void HandleNotify(NotificationMessage msg)
        => InvokeAsync(() => Add(msg));

    private void Add(NotificationMessage msg)
    {
        _messages.Add(msg);
        StateHasChanged();
        _ = RemoveAfterDelay(msg);
    }

    private async Task RemoveAfterDelay(NotificationMessage msg)
    {
        await Task.Delay(3000);
        _messages.Remove(msg);
        StateHasChanged();
    }

    private void Dismiss(NotificationMessage msg)
    {
        _messages.Remove(msg);
        StateHasChanged();
    }

    public void Dispose() =>
        Notifier.OnNotify -= HandleNotify;
}
